<?php

class model_generator {

	private $table;
	
	private $columns;
	private $relationships;
	
	// Retrived from DB Metadata
	private $keyName;
	private $autoKey;
	
	private $metaDataArray = array();
	
  	public function __construct($table = NULL)
  	{
        $this->table = $table;
        $this->autoKey = false;
        $this->keyName = '';
        
        $this->columns = array();
        $this->relationships = array();
    }
    
    
    
    public function get_code(){
        $this->get_data_definition();
        $this->get_data_relationships();
        $code = $this->get_file_head();
        $code .= $this->get_properties();
        $code .= $this->get_ctor();
		$code .= $this->get_file_foot();
        return $code;
    }
    
  private function get_file_head(){
        $code  = "<?php\n";
        $code .= "/**\n";
        $code .= " * Please enter a description of this model class.\n";
        $code .= " *\n";
        $code .= " * @author XXX <XXX@domain.com>\n";
        $code .= " * @version ". date('Ymd') ."\n";
        $code .= " * MODEL GENERATED BY MGT FOR SQLMODELMVC - By Lee Stafford \n";
        $code .= " */\n\n";
        $code .= "class ". strtolower($this->table) ." extends SQLModel {\n";
        return $code;
    }
    
      private function get_file_foot(){
        $code = '';
        $code .= '}';
        
        return $code;
    }
    
    public function get_data_definition()
    {
    	$query = "SHOW COLUMNS FROM ". $this->table;
    	$result = SQLQuery::Query($query);
    	
    	foreach($result as $row)
    	{
    		$columnName = $row->Field;
    		$nullable = $row->Null;
    		$default = $row->Default;
    		$key = $row->Key;
    		$type = $row->Type;
    		$extra = $row->Extra;
    		
    		
            $this->columns[$columnName] = array('allow_null' => $nullable,
                                                  'decimal' => NULL,
                                                  'default' => $default,
                                                  'extra' => $extra,
                                                  'key' => $key,
                                                  'length' => NULL,
                                                  'name' => $columnName,
                                                  'text' => NULL,
                                                  'type' => $type);
                                                  
           if($row->Key == "PRI")
           {
           	$this->keyName = $columnName;
           }
           if($row->Extra == "auto_increment")
           {
           	$this->autoKey = true;
           }
                                                  
    	}
    	
    }
    
    public function get_data_relationships()
    {
    	$query = "select * 
			from INFORMATION_SCHEMA.KEY_COLUMN_USAGE
			where TABLE_SCHEMA = '". DB_NAME ."' and TABLE_NAME = '". $this->table ."'
			and referenced_column_name is not NULL;";
			
		$result = SQLQuery::Query($query);
		
		foreach($result as $row)
		{
			$className = $row->REFERENCED_TABLE_NAME;
			$modelKey = $row->COLUMN_NAME;
			$forgienKey = $row->REFERENCED_COLUMN_NAME;
			$name = $row->CONSTRAINT_NAME;
			
			$this->relationships[$name] = array('className' => $className, 'type' => 1, 'modelKey' => $modelKey, 'forgienKey' => $forgienKey, 'name' => $name);
			
		}
			
    }

    private function get_properties(){
        $code = '';
        if (count($this->columns)){
            foreach ($this->columns AS $index => $col){
                $code .= "\t/**\n";
                if (NULL !== $col['text']){
                    $code .= "\t * $col[text]\n";
                }else{
                    $code .= "\t * Description\n";
                }
                $code .= "\t * @var ". $col['type'];
                if (NULL !== $col['length']){
                    $code .= " ($col[length]";
                    if (NULL !== $col['decimal']){
                        $code .= ",$col[decimal]";
                    }
                    $code .= ")";
                }
                $code .= "\n\t */\n";
                $temp_name = str_replace('#', '_', $col['name']);
                $code .= "\tpublic \$$temp_name;\n\n";
            }
        }
        
	    if (count($this->relationships)){
	    	foreach($this->relationships as $index => $col)
	    	{
	    		$code .= "\t/**\n";
	    		$code .= "\t * RELATIONSHIP \n";
	    		$code .= "\n\t */\n";
	    		
	    		$relName = $col['name'];
	    		
	    		$code .= "\tprotected \$$relName;\n\n";
	    		
	    	}
	    }
        
        return $code;
    }

    /**
     * Create the code needed for the __construct function.
     * 
     * @return string The PHP code for the __construct function.
     */
    public function get_ctor(){
        $code = "\t/**\n\r";
        $code .= "\t * Constructor.\n";
        $code .= "\t *\n";
        $code .= "\t */ \n\r";

        $code .= "\tpublic function __construct(){\n\r";

		$code .= "\t\t".'$this->table_name'." = '$this->table'; \n\r";
		
		$ak = "false";
		if($this->autoKey == true)
		{
			$ak = "true";
		}
		
        $code .= "\t\t".'$this->auto_key'." = $ak; \n\r";
        $code .= "\t\t".'$this->key_name'." = '$this->keyName'; \n\r";
        
        // Relationships
	    if (count($this->relationships)){
	    	
	    	$relationshipCount = 1;
	    	
            foreach ($this->relationships AS $index => $col){
            	
            	$relName = $col['name'];
            	$clName = $col['className'];
            	$modelKey = $col['modelKey'];
            	$foreignKey = $col['forgienKey'];
            	
            	$code .= "\t\t  \n\r";
            	$code .= "\t\t \$Relationship$relationshipCount = new RelationshipModel(); \n\r";
            	$code .= "\t\t \$Relationship".$relationshipCount."->ModelProperty = \"$relName\"; \n\r";
            	$code .= "\t\t \$Relationship".$relationshipCount."->ClassName = \"$clName\"; \n\r";
            	$code .= "\t\t \$Relationship".$relationshipCount."->RelationshipType = 1;  // DEFAULT IS ONE TO ONE \n\r";
            	$code .= "\t\t \$Relationship".$relationshipCount."->ModelKey = \"$modelKey\"; \n\r";
            	$code .= "\t\t \$Relationship".$relationshipCount."->ForeignKey = \"$foreignKey\"; \n\r";
            	
            	
            	$relationshipCount++;
            }	    
            
            $code .= " \n\r";
            $code .= "\t\t \$this->relationships = array(";
            $first = true;
            
            while($relationshipCount-1 > 0)
            {
            	$relationshipCount--;
            	
            	if($first == false)
            	{
            		$code .= ",";
            	}
            	$code .= "\$Relationship".$relationshipCount;
            	
            	$first = false;
            	
            }
            $code .= ");";
            $code .= " \n\r";
            	
	    }
	    
	    $code .= "\n\r";
	    
	    // Metadata
	    $code.="\t\t /* Model Metadata */ \n\r \n";
        if (count($this->columns)){
        	foreach ($this->columns AS $index => $col){
        		$code .= "\t\t \$".$col['name']."Metadata = new ModelMetadata(); \n\r";
				$code .= "\t\t \$".$col['name']."Metadata->columnName = '".$col['name']."'; \n\r";
				
				$nulla = "false";
				if($col['allow_null'] == "YES")
				{
					$nulla = "true";	
				}
				
				$code .= "\t\t \$".$col['name']."Metadata->nullable = $nulla ; \n\r";
				$code .= "\t\t \$".$col['name']."Metadata->default = '".$col['default']."'; \n\r";
				$code .= "\t\t \$".$col['name']."Metadata->key ='".$col['key']."';\n\r";
				
				$parsedType = explode('(', $col['type']);
				
				$code .= "\t\t \$".$col['name']."Metadata->type = '".$parsedType[0]."'; \n\r";
				$code .= "\t\t \$".$col['name']."Metadata->extra ='".$col['extra']."'; \n\r";
				
				preg_match('#\((.*?)\)#', $col['type'], $match);
				
				if(isset($match[1]))
				{
					$code .= "\t\t \$".$col['name']."Metadata->length =".$match[1]."; \n\r";
				}
				$code .="\t\t \$this->metadata['".$col['name']."'] = \$".$col['name']."Metadata; \n\r";
				
				$code .= "\n\r \n\r";
        	}
        }
        
        $code .= "\t}\n\r";
        return $code;
    }
}
